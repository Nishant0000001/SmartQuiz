{"ast":null,"code":"app.post('/user-login', async (req, res) => {\n  const {\n    userId,\n    password\n  } = req.body;\n  try {\n    const result = await client.query('SELECT password FROM user_password LIMIT 1');\n    if (result.rows.length === 0) {\n      return res.status(401).json({\n        message: '⚠️ No password set by admin.'\n      });\n    }\n    const storedPassword = result.rows[0].password;\n    console.log(`[DEBUG] Entered password: ${password}`);\n    console.log(`[DEBUG] Stored password: ${storedPassword}`);\n    if (password !== storedPassword) {\n      return res.status(401).json({\n        message: '❌ Invalid password or user ID'\n      });\n    }\n    const token = jwt.sign({\n      userId\n    }, JWT_SECRET, {\n      expiresIn: '1h'\n    });\n    res.json({\n      message: '✅ Login successful',\n      token\n    });\n  } catch (err) {\n    console.error('❌ User login error:', err);\n    res.status(500).json({\n      message: '❌ Server error'\n    });\n  }\n});","map":{"version":3,"names":["app","post","req","res","userId","password","body","result","client","query","rows","length","status","json","message","storedPassword","console","log","token","jwt","sign","JWT_SECRET","expiresIn","err","error"],"sources":["C:/Mystuff/Quiz2.O App/frontend/src/components/UserLogin.js"],"sourcesContent":["app.post('/user-login', async (req, res) => {\r\n    const { userId, password } = req.body;\r\n  \r\n    try {\r\n      const result = await client.query('SELECT password FROM user_password LIMIT 1');\r\n  \r\n      if (result.rows.length === 0) {\r\n        return res.status(401).json({ message: '⚠️ No password set by admin.' });\r\n      }\r\n  \r\n      const storedPassword = result.rows[0].password;\r\n  \r\n      console.log(`[DEBUG] Entered password: ${password}`);\r\n      console.log(`[DEBUG] Stored password: ${storedPassword}`);\r\n  \r\n      if (password !== storedPassword) {\r\n        return res.status(401).json({ message: '❌ Invalid password or user ID' });\r\n      }\r\n  \r\n      const token = jwt.sign({ userId }, JWT_SECRET, { expiresIn: '1h' });\r\n      res.json({ message: '✅ Login successful', token });\r\n    } catch (err) {\r\n      console.error('❌ User login error:', err);\r\n      res.status(500).json({ message: '❌ Server error' });\r\n    }\r\n  });\r\n  "],"mappings":"AAAAA,GAAG,CAACC,IAAI,CAAC,aAAa,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EACxC,MAAM;IAAEC,MAAM;IAAEC;EAAS,CAAC,GAAGH,GAAG,CAACI,IAAI;EAErC,IAAI;IACF,MAAMC,MAAM,GAAG,MAAMC,MAAM,CAACC,KAAK,CAAC,4CAA4C,CAAC;IAE/E,IAAIF,MAAM,CAACG,IAAI,CAACC,MAAM,KAAK,CAAC,EAAE;MAC5B,OAAOR,GAAG,CAACS,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEC,OAAO,EAAE;MAA+B,CAAC,CAAC;IAC1E;IAEA,MAAMC,cAAc,GAAGR,MAAM,CAACG,IAAI,CAAC,CAAC,CAAC,CAACL,QAAQ;IAE9CW,OAAO,CAACC,GAAG,CAAC,6BAA6BZ,QAAQ,EAAE,CAAC;IACpDW,OAAO,CAACC,GAAG,CAAC,4BAA4BF,cAAc,EAAE,CAAC;IAEzD,IAAIV,QAAQ,KAAKU,cAAc,EAAE;MAC/B,OAAOZ,GAAG,CAACS,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEC,OAAO,EAAE;MAAgC,CAAC,CAAC;IAC3E;IAEA,MAAMI,KAAK,GAAGC,GAAG,CAACC,IAAI,CAAC;MAAEhB;IAAO,CAAC,EAAEiB,UAAU,EAAE;MAAEC,SAAS,EAAE;IAAK,CAAC,CAAC;IACnEnB,GAAG,CAACU,IAAI,CAAC;MAAEC,OAAO,EAAE,oBAAoB;MAAEI;IAAM,CAAC,CAAC;EACpD,CAAC,CAAC,OAAOK,GAAG,EAAE;IACZP,OAAO,CAACQ,KAAK,CAAC,qBAAqB,EAAED,GAAG,CAAC;IACzCpB,GAAG,CAACS,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEC,OAAO,EAAE;IAAiB,CAAC,CAAC;EACrD;AACF,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}